Window SearchCustomers_W {
    String text := ['Search Customers']

    Label Customers_T_page {
        Integer current := [1]
        Integer size := [5]
        Integer total
        String text := [$current$.toString().concat(' of ').concat($total$.toString())]

        event onView(total) {
            total := [Customer.allInstances()->size()]
            if [$total$ = 0] {
                total := [1]
            }
            else {
                if [$total$.mod($size$) > 0] {
                    total := [$total$.div($size$) + 1]
                }
                else {
                    total := [$total$.div($size$)]
                }
            }
        }
    }

    Table Customers_T {
        OrderedSet(Customer) all := [Customer.allInstances()->asOrderedSet()]
        Integer total := [$all$->size()]
        Integer size := [5]
        Integer lower := [1]
        Integer upper := [if $lower$+$size$-1 > $total$ then $total$ else $lower$+$size$-1 endif]
        OrderedSet(Customer) rows := [$all$->subOrderedSet($lower$,$upper$)]
        OrderedSet(Customer) selected := [null]

        columns {
            ['name'] : Label name {
                event onView (text) {
                    try {
                        text := [$Customers_T.row$.name]
                    }
                    catch(SecurityException) {
                        text := [null]
                    }
                }
            }
            ['surname'] : Label surname {
                event onView (text) {
                    try {
                        text := [$Customers_T.row$.surname]
                    }
                    catch(SecurityException) {
                        text := [null]
                    }
                }
            }

            ['birthday'] : Label birthday {
                Date value
                event onView (value) {
                    try {
                        value := [$Customers_T.row$.birthday]
                    }
                    catch(SecurityException) {
                        value := [null]
                    }
                }
                event onView (text) {
                    text := [if $value$.oclIsUndefined() then '' else $value$.truncate(TimeUnit::DAY).toString().substring(1,10) endif]
                    }
                }

            ['email'] : Label email__________ {
                event onView (text) {
                    try {
                        text := [$Customers_T.row$.email]
                    }
                    catch(SecurityException) {
                        text := [null]
                    }
                }
            }

            ['phone'] : Label phone {
                event onView (text) {
                    try {
                        text := [$Customers_T.row$.phone]
                    }
                    catch(SecurityException) {
                        text := [null]
                    }
                }
            }

            ['loyalty'] : Label loyalty {
                event onView (text) {
                    try {
                        text := [$Customers_T.row$.loyalty.toString()]
                    }
                    catch(SecurityException) {
                        text := [null]
                    }
                }

            }
        }
    }

    Button Customers_T_prev_B {
        String text := ['Previous']

        event onClick {
            if [$Customers_T.lower$ > 1] {
                Customers_T.lower := [if $Customers_T.lower$-$Customers_T.size$ < 1 then 1 else $Customers_T.lower$-$Customers_T.size$ endif]
                Customers_T.upper := [if $Customers_T.lower$+$Customers_T.size$-1 > $Customers_T.total$ then $Customers_T.total$ else $Customers_T.lower$+$Customers_T.size$-1 endif]
                Customers_T.rows := [$Customers_T.all$->subOrderedSet($Customers_T.lower$,$Customers_T.upper$)]

                Customers_T_page.current := [$Customers_T_page.current$ - 1]
                reevaluate Customers_T_page.text
            }
        }
    }

    Button Customers_T_next_B {
        String text := ['Next']

        event onClick {
            if [$Customers_T.upper$ < $Customers_T.total$] {
                Customers_T.lower := [$Customers_T.upper$+1]
                Customers_T.upper := [if $Customers_T.lower$+$Customers_T.size$-1 > $Customers_T.total$ then $Customers_T.total$ else $Customers_T.lower$+$Customers_T.size$-1 endif]
                Customers_T.rows := [$Customers_T.all$->subOrderedSet($Customers_T.lower$,$Customers_T.upper$)]

                Customers_T_page.current := [$Customers_T_page.current$ + 1]
                reevaluate Customers_T_page.text
            }
        }
    }

    Button Edit_B {
        String text := ['Edit']
        event onClick {
            try {
                if [if $Customers_T.selected$->oclIsUndefined() then false else $Customers_T.selected$->size() = 1 endif] {
                    open EditCustomer_atom_W(selectedCustomer : [$Customers_T.selected$->any(true)])
                }
                else {
                    notification(['Error'],['You must select exactly one customer.'],[-1]) 
                }
            }
            catch (SecurityException) {
                notification (['Security error'],['You do not have permission to open the window.'],[-1])
            }
        }
    }

    Button Delete_B {
        String text := ['Delete']
        event onClick {
            try {
                if [if $Customers_T.selected$->oclIsUndefined() then false else $Customers_T.selected$->notEmpty() endif] {
                    try {
                        foreach deleteObject in [$Customers_T.selected$] {
                           delete [$deleteObject$] 
                        }
                        notification (['Success'],['The selected elements been deleted successfully.'],[-1])

                        reevaluate Customers_T_page.current
                        reevaluate Customers_T_page.size
                        reevaluate Customers_T_page.total
                        reevaluate Customers_T_page.text

                        reevaluate Customers_T.all
                        reevaluate Customers_T.total
                        reevaluate Customers_T.size
                        reevaluate Customers_T.lower
                        reevaluate Customers_T.upper
                        reevaluate Customers_T.rows
                        reevaluate Customers_T.selected
                    }
                    catch (SecurityException) {
                        notification(['Security error'],['You do not have permission to delete a Customer.'],[-1])
                    }
                }
            }
            catch (SecurityException) {
                notification(['Security error'],['You do not have permission to delete a Customer.'],[-1])
            }
        }
    }

    Button Back_B {
        String text := ['Back']
        event onClick {
            back
            }
    }
}