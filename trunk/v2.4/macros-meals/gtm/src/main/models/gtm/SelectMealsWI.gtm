Window SelectMealsWI  {
    Residence residence
    ZoneId zone := [$residence$.zone]
    LocalDateTime selDate := [LocalDateTime.now($zone$).toLocalDate().atStartOfDay()] 
    DayOfWeek selDateDayOfWeek := [$selDate$.getDayOfWeek()] 
    // we want to start on Monday:
    // getValue(): the values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday)
    // The following line code does not work: Source was evaluated to DayOfWeek::FRIDAY with type 'DayOfWeek' does not conform to DayOfWeek.
    // LocalDateTime selDateWeekFirstDay := [$selDate$.plusDays(1-$selDateDayOfWeek$.getValue())]

    LocalDateTime selDateWeekFirstDay := //gortiz: there have to be other better ways to do that (ej: using DayOfWeek#getValue())
        [ 
        if $selDateDayOfWeek$=DayOfWeek::MONDAY then 
            $selDate$
        else (if $selDateDayOfWeek$=DayOfWeek::TUESDAY then 
            $selDate$.plusDays(-1) 
        else (if $selDateDayOfWeek$=DayOfWeek::WEDNESDAY then 
            $selDate$.plusDays(-2)
        else (if $selDateDayOfWeek$=DayOfWeek::THURSDAY then 
            $selDate$.plusDays(-3) 
        else (if $selDateDayOfWeek$=DayOfWeek::FRIDAY then
            $selDate$.plusDays(-4) 
        else (if $selDateDayOfWeek$=DayOfWeek::SATURDAY then 
            $selDate$.plusDays(-5) 
        else $selDate$.plusDays(-6) 
        endif) endif) endif) endif) endif)endif]


    Button NextWeekBU {
        String text := ['Next'] 
        //[Date.now().getDayOfWeek().toString()]
        event onClick {
              SelectMealsWI.selDate := [$SelectMealsWI.selDate$.plusDays(7)]
        }
    }

    Button PreviousWeekBU {
        String text := ['Prev']
        event onClick {
              SelectMealsWI.selDate := [$SelectMealsWI.selDate$.plusDays(-7)]
        }
    }

    Label firstDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]
    } 
    Label secondDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(1)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]
    } 
    Label thirdDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(2)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]

    } 
    Label fourthDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(3)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]

    } 
    Label fifthDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(4)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]

    } 
    Label sixthDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(5)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]

    } 
    Label seventhDayThisWeekLB {
        String text := [
            let thisDay  : LocalDateTime = $SelectMealsWI.selDateWeekFirstDay$.plusDays(6)
            in thisDay.getMonth().name().substring(1,3).concat(' ').concat(thisDay.getDayOfMonth().toString())
            ]

    } 
    
  


    Table WeekMealsTB {
        Set(Meal) rows := [$SelectMealsWI.residence$.meals]
        Set(Meal) selected := [null]
        columns {
        ['First'] : ComboBox Monday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Monday.row$.initial]
                                }
                            
                            event onView (selected) {
                                try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate()=$thisDate$.toLocalDate()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                }
                                catch (Exception) { }
                            }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]
                                             }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                            catch (SecurityException) { 
                                reevaluate selected
                                notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                            }
                            /*
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1])
                            }        
                            */
                           }
                    }
        ['Second'] : ComboBox Tuesday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(1)]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Tuesday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                             }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]

                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    }
                     
                    
         ['Third'] : ComboBox Wednesday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(2)]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Wednesday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                            }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    }
                        
         ['Fourth'] : ComboBox Thursday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(3)]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Thursday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                            }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    }
                    
         ['Fifth'] : ComboBox Friday {
                        LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(4)]
                        FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                        Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Friday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                            }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    }
                    
          ['Sixth'] : ComboBox Saturday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(5)]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Saturday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                            }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    }
                 
          ['Seventh'] : ComboBox Sunday {
                            LocalDateTime thisDate := [$SelectMealsWI.selDateWeekFirstDay$.plusDays(6)]
                            FoodRegime currentFoodRegime := [$SelectMealsWI.caller$.regimes->any(r|r.start.toLocalDate().atStartOfDay() <= $thisDate$.toLocalDate().atStartOfDay() and r.end.toLocalDate().atStartOfDay() >= $thisDate$.toLocalDate().atStartOfDay()).regime]
                            Set(MealOption) rows := [$WeekMealsTB.row$.options]
                            MealOption selected

                            Label initial {
                                String text := [$Sunday.row$.initial]
                                }
                            
                            event onView (selected) {
                                    try {
                                    selected := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption]
                                    }
                                    catch (Exception) { }
                                    }

                            event onChange (selected) {
                                try {
                                if [$selected$.oclIsUndefined()=false] 
                                {   
                                    if [not($SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).oclIsUndefined())]
                                    {
                                        if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).oclIsUndefined()]
                                        {
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.ownedBy] := [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay())]
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                        }
                                        else {
                                            if [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption <> $selected$]
                                             { [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption] := [$selected$]
                                                [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).foodRegime] := [$currentFoodRegime$]

                                            }
                                        }
                                    }
                                    else {
                                        newDailyMealSelection := new DailyMealSelection
                                        [$newDailyMealSelection$.date] := [$thisDate$.toLocalDate().atStartOfDay()]
                                        [$SelectMealsWI.caller$.dailyMeals] += [$newDailyMealSelection$]
                                        newMealSelection := new MealSelection
                                        [$newMealSelection$.meal] := [$WeekMealsTB.row$]
                                        [$newDailyMealSelection$.selections] += [$newMealSelection$]
                                        [$newMealSelection$.mealOption] := [$selected$]
                                        [$newMealSelection$.foodRegime] := [$currentFoodRegime$]
                                 }
                                 }
                                else {
                                    if [not($WeekMealsTB.row$.options->any(o|o = $SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$).mealOption).oclIsUndefined())]
                                        {   delete [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay()=$thisDate$.toLocalDate().atStartOfDay()).selections->any(s|s.meal = $WeekMealsTB.row$)]
                                            //[$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections] -= [$SelectMealsWI.caller$.dailyMeals->any(d|d.date.toLocalDate().atStartOfDay())=$thisDate$.toLocalDate().atStartOfDay()))).selections->any(s|s.meal = $WeekMealsTB.row$)] 
                                            }
                                 }
                           } 
                          catch (SecurityException) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['UNAUTHORIZED'], [-1]) 
                                    }
                           catch (Exception) { 
                                    reevaluate selected
                                    notification(['MESSAGE'], ['EXCEPTION'], [-1]) }                        
                           }
                    } 


         }

    }

    Button changePasswordBU {
        String text := ['Settings']

        event onClick {
            open ChangePasswordWI()
        }
    }

    Button logoutBU {
        String text := ['Log out']

        event onClick {
            exit
        }
    }

    event onChange (selDate) {     
        reevaluate selDateDayOfWeek
        reevaluate selDateWeekFirstDay
        reevaluate firstDayThisWeekLB.text
        reevaluate secondDayThisWeekLB.text
        reevaluate thirdDayThisWeekLB.text
        reevaluate fourthDayThisWeekLB.text
        reevaluate fifthDayThisWeekLB.text        
        reevaluate sixthDayThisWeekLB.text
        reevaluate seventhDayThisWeekLB.text

        WeekMealsTB.rows := [Meal.allInstances()->select(m|false)]
        reevaluate WeekMealsTB.rows
    }
}

            