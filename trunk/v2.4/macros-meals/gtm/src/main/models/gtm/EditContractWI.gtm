Window EditContractWI {
    String text := ['Edit contract']
    Residence residence
    String locale := [$residence$.lang]

    Contract thisContract

Label logoIMG {
}

Table ContractItemsTB {
    Set(ContractOption) rows := [$EditContractWI.thisContract$.options]
    ContractOption selected
    columns {
        ['Meal'] : Label Literal { String text := [$ContractItemsTB.row$.mealOption.ownedBy.literal] }
        ['Options'] : Label Option { String text := [$ContractItemsTB.row$.mealOption.literal] }
        ['Mo'] : BooleanField Monday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::MONDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::MONDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::MONDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::MONDAY) endif]
                              }
                         }                   
                    else {
                        try {
                           // foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::MONDAY)] {
                           //     delete [$selection$]
                           // }
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::MONDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['Tu'] : BooleanField Tuesday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::TUESDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::TUESDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::TUESDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::TUESDAY) endif]
                              }
                         }                   
                    else {
                        try {
                            //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::TUESDAY)] {
                            //    delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::TUESDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['We'] : BooleanField Wednesday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::WEDNESDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::WEDNESDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::WEDNESDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::WEDNESDAY) endif]
                              }
                         }                   
                    else {
                        try {
                            //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::WEDNESDAY)] {
                            //    delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::WEDNESDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['Th'] : BooleanField Thursday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::THURSDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::THURSDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::THURSDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::THURSDAY) endif]
                              }
                         }                   
                    else {
                        try {
                           // foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::THURSDAY)] {
                           //     delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::THURSDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['Fr'] : BooleanField Friday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::FRIDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::FRIDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::FRIDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::FRIDAY) endif]
                              }
                         }                   
                    else {
                        try {
                            //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::FRIDAY)] {
                            //    delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::FRIDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['Sa'] : BooleanField Saturday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::SATURDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::SATURDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::SATURDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::SATURDAY) endif]
                              }
                         }                   
                    else {
                        try {
                            //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::SATURDAY)] {
                            //    delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::SATURDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 
 ['Su'] : BooleanField Sunday { 
            Boolean value := [if ($ContractItemsTB.row$.days->includes(DayOfWeek::SUNDAY)) then true else null endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        {
                        if [$ContractItemsTB.row$.days->excludes(DayOfWeek::SUNDAY)]
                            { [$ContractItemsTB.row$.days] := 
                              [if $ContractItemsTB.row$.days->oclIsUndefined()
                              then DayOfWeek::SUNDAY->asSet()
                              else $ContractItemsTB.row$.days->including(DayOfWeek::SUNDAY) endif]
                              }
                         }                   
                    else {
                        try {
                            //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.row$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.row$.mealOption and ms.ownedBy.date.getDayOfWeek() = DayOfWeek::SUNDAY)] {
                            //    delete [$selection$]
                            //}
                            [$ContractItemsTB.row$.days] := [$ContractItemsTB.row$.days->excluding(DayOfWeek::SUNDAY)]
                        }
                        catch(SecurityException) {
                            notification(['Message'], ['Sorry. There are meal selections associated to the current contract option, that can not be deleted'], [-1])
                        }
                    }

        } } } 




} 
    }

Table MealsTB {
    OrderedSet(Meal) rows := [$EditContractWI.residence$.meals->sortedBy(position)]
    Meal selected 
    columns {
        ['Meals'] : Label Meals { String text := [$MealsTB.row$.literal] }
    }
}

Table MealOptionsTB {
    OrderedSet(MealOption) rows := [if ($MealsTB.selected$.oclIsUndefined()) then MealOption.allInstances()->select(false)->asOrderedSet() else $MealsTB.selected$.options->sortedBy(position) endif]
    MealOption selected 
    columns {
        ['Options'] : Label Options { String text := [$MealOptionsTB.row$.literal] }
    }
}



Button NewContractOptionBU {
    String text := locate(Create)
    event onClick {
    if [$MealsTB.selected$.oclIsUndefined()] {
        notification(['Error'], ['Please, select first a meal'], [0])
       }
    else { if [$MealOptionsTB.selected$.oclIsUndefined()] {
              notification(['Error'], ['Please, select first a meal option.'], [0])
            }
           else {
              newOption := new ContractOption
              [$newOption$.mealOption] := [$MealOptionsTB.selected$]
              [$newOption$.includedIn] := [$EditContractWI.thisContract$]
              [$newOption$.days] := [DayOfWeek.allInstances()]
              reevaluate ContractItemsTB.rows

           }
           }

    }
}


Button DeleteContractOptionBU {
    String text := locate(Delete)
    event onClick {
        if [$ContractItemsTB.selected$.oclIsUndefined()] {
            notification(['Error'], ['Please, selected first a contract option.'], [0] )
        }
        else {
            try {
                //foreach selection in [$EditContractWI.residence$.users.dailyMeals->union($EditContractWI.residence$.guests.dailyMeals)->select(dms|$ContractItemsTB.selected$.includedIn.ownedBy->exists(p|dms.date.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay() and dms.date.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())).selections->select(ms|ms.mealOption = $ContractItemsTB.selected$.mealOption and $ContractItemsTB.selected$.days->includes(ms.ownedBy.date.getDayOfWeek()))] {
                //    delete [$selection$]
                //}
                delete [$ContractItemsTB.selected$]
                reevaluate ContractItemsTB.rows
            }
            catch (SecurityException) {
                notification(['Message'], ['Sorry. There are meal selections associated to the selected contract option, that can not be deleted'], [-1])
            }
        }

    }
}

Button BackBU {
    String text := locate(Back)
    event onClick {
        back
    }
}

event onChange (MealsTB.selected) {
    reevaluate MealOptionsTB.rows
}
}