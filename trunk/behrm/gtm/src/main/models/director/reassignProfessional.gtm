Window reassignProfessionalWi{
    String text := ['Director Menu']
    MedicalCenter medicalCenter
    
    Label medicalCenterLa{
        String text := ['Medical center: '.concat($reassignProfessionalWi.medicalCenter$.name)]
    }
    Label selectProfessionalLa{
        String text := ['Select the professional to be reassigned:']
    }
    Label selectDepartmentLa{
        String text := ['Select the new department:']
    }

    Table professionalsTa{
        // union is not supported
        // Set(Professional) rows := [$reassignProfessionalWi.medicalCenter$.departments.doctors.professional->union($reassignProfessionalWi.medicalCenter$.departments.nurses.professional)->asSet()]
        Set(Professional) rows := [Professional.allInstances()->select(p|p.worksIn->includes($reassignProfessionalWi.medicalCenter$))->select(p|p.asNurse->notEmpty() or p.asDoctor->notEmpty())]

    }
    Table departmentsTa{
        Set(Department) rows := [$reassignProfessionalWi.medicalCenter$.departments]
    }

    Button reassignBu{
        String text := ['Reassign the professional']
    }
    Button backBu{
        String text := ['Back']
    }   
}

Table reassignProfessionalWi.professionalsTa{
    columns {
        ['Name'] : Label nameLa{
            String text := [$professionalsTa.row$.name]
        }
        ['Surname'] : Label surnameLa{
            String text := [$professionalsTa.row$.surname]
        }
        ['Professional'] : Label professionalLa{
            String text := [
                if $professionalsTa.row$.asDoctor->notEmpty() then
                    'Doctor'
                else
                    if $professionalsTa.row$.asNurse->notEmpty() then
                        'Nurse'
                    else
                        'Unknown'
                    endif
                endif
            ]
        }
        ['Department'] : Label departmentLa{
            String text := [
                if $professionalsTa.row$.asDoctor->notEmpty() then
                    $professionalsTa.row$.asDoctor.departments->any(d|d.belongsTo->any(true) = $reassignProfessionalWi.medicalCenter$).name
                else
                    if $professionalsTa.row$.asNurse->notEmpty() then
                        $professionalsTa.row$.asNurse.departments->any(d|d.belongsTo->any(true) = $reassignProfessionalWi.medicalCenter$).name
                    else
                        'Unknown'
                    endif
                endif
            ]
        }
    }
}

Table reassignProfessionalWi.departmentsTa{
    columns {
        ['Department'] : Label departmentLa{
            String text := [$departmentsTa.row$.name]
        }   
    }
}

Button reassignProfessionalWi.reassignBu{
    event onClick{
        if [not $professionalsTa.selected$.oclIsUndefined()]{
            if [not $departmentsTa.selected$.oclIsUndefined()]{
                if [$professionalsTa.selected$.asDoctor->notEmpty()]{
                    [$professionalsTa.selected$.asDoctor->any(true).departments] -= [$professionalsTa.selected$.asDoctor.departments->any(d|d.belongsTo->any(true) = $reassignProfessionalWi.medicalCenter$)]
                    [$professionalsTa.selected$.asDoctor->any(true).departments] += [$departmentsTa.selected$]
                    professionalsTa.rows := [Professional.allInstances()->select(false)]
                    // union not supported
                    //reassignProfessionalWi.professionalsTa.rows := [$reassignProfessionalWi.medicalCenter$.departments.doctors.professional->union($reassignProfessionalWi.medicalCenter$.departments.nurses.professional)->asSet()]
                    professionalsTa.rows := [Professional.allInstances()->select(p|p.worksIn->includes($reassignProfessionalWi.medicalCenter$))->select(p|p.asNurse->notEmpty() or p.asDoctor->notEmpty())]
                    notification(['Message'],['The professional has been reassigned properly.'],[-1])
                }
                else{
                    if [$professionalsTa.selected$.asNurse->notEmpty()]{
                        [$professionalsTa.selected$.asNurse->any(true).departments] -= [$professionalsTa.selected$.asNurse.departments->any(d|d.belongsTo->any(true) = $reassignProfessionalWi.medicalCenter$)]
                        [$professionalsTa.selected$.asNurse->any(true).departments] += [$departmentsTa.selected$]
                        professionalsTa.rows := [Professional.allInstances()->select(false)]
                        // union not supported
                        //reassignProfessionalWi.professionalsTa.rows := [$reassignProfessionalWi.medicalCenter$.departments.doctors.professional->union($reassignProfessionalWi.medicalCenter$.departments.nurses.professional)->asSet()]
                        professionalsTa.rows := [Professional.allInstances()->select(p|p.worksIn->includes($reassignProfessionalWi.medicalCenter$))->select(p|p.asNurse->notEmpty() or p.asDoctor->notEmpty())]
                        notification(['Message'],['The professional has been reassigned properly.'],[-1])
                    }
                }
            }
            else{
                notification(['Message'],['You have to select a department'],[-1])
            }
        }
        else{
            notification(['Message'],['You have to select a professional'],[-1])
        }
    }
}

Button reassignProfessionalWi.backBu{
    event onClick{
        back
    }
} 