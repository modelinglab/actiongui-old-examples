role Director extends Default{
    Administrative{
        // create does not support self --> fullAccess can not be used
        // fullAccess constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        // intersection is not supported
        // delete, read, update constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        delete, read, update constrainedBy [caller.worksIn->exists(m|self.professional.worksIn->includes(m))]
        create
    }
    Doctor{
        // create does not support self --> fullAccess can not be used
        // entityFullAccess constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        // intersection is not supported
        // delete, read, update constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        delete, read, update constrainedBy [caller.worksIn->exists(m|self.professional.worksIn->includes(m))]
        create
    }
    Nurse{
        // create does not support self --> fullAccess can not be used
        // entityFullAccess constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        // intersection is not supported
        // delete, read, update constrainedBy [caller.worksIn->intersection(self.professional.worksIn)->notEmpty()]
        delete, read, update constrainedBy [caller.worksIn->exists(m|self.professional.worksIn->includes(m))]
        create
    }
    Professional{
        delete, read,
            update password, update user, update name, update surname,
            add asNurse, remove asNurse, add asDoctor, remove asDoctor,
            add asDirector, remove asDirector, add asAdministrative, remove asAdministrative,
            add myRole, remove myRole constrainedBy [caller.worksIn->exists(m|self.worksIn->includes(m))]
        create
        add worksIn, remove worksIn constrainedBy [caller.worksIn->includes(target)]
    }
}