Window EditUserRegimenesWI {
   User thisUser

Table ThisUserRegimesTB {
    OrderedSet(Residency) rows := [$EditUserRegimenesWI.thisUser$.regimes->sortedBy(start)->reverse()]
    OrderedSet(Residency) selected := [null]
    columns {
    ['Start'] : Label Start { String text := [$ThisUserRegimesTB.row$.start.toString().substring(1,10)] }
    ['End'] : Label End { String text := [$ThisUserRegimesTB.row$.end.toString().substring(1,10)] }
    ['Regime'] : Label Regime { String text := [$ThisUserRegimesTB.row$.regime.name] }
}
}

  

#form NewPeriodFO {
    entity: Residency
    prop: start {label: ['Start: ']}
    prop: end {label: ['End: ']}
}#

Label FoodRegimesLB {
    String text := ['Food regime: ']
}

ComboBox FoodRegimesCB {
        Set(FoodRegime) rows := [FoodRegime.allInstances()]
        
        Label Regime {
            String text := [$FoodRegimesCB.row$.name]
        }

    }

Button CreatePeriodBU {
    String text := ['New period']
    Residency newPeriod
    event onClick {
        #create {
            form: NewPeriodFO 
            result: newPeriod
            assert: [not($NewPeriodFO_start.value$.oclIsUndefined())]
                {message: ['Please, select first a starting date'] 
                 assert: [not($NewPeriodFO_end.value$.oclIsUndefined())]
                    {message: ['Please, select first an ending date']
                        assert: [$NewPeriodFO_start.value$ <= $NewPeriodFO_end.value$]
                        {message: ['Please, select an ending date that is later or equal than the starting date']
                        assert: [$EditUserRegimenesWI.thisUser$.regimes->select(p|
                                    ($NewPeriodFO_start.value$ <= p.start and $NewPeriodFO_end.value$ >= p.start)
                                    or ($NewPeriodFO_start.value$ > p.start and $NewPeriodFO_start.value$ <= p.end))
                                ->isEmpty()]
                            {message: ['The selected period overlaps with one or more existing regimes. Please, change either the starting or the ending date']
                             assert : [not($FoodRegimesCB.selected$.oclIsUndefined())]
                                {message: ['Please, select first a food regime.']
} } } } }
        }#
        if [not($newPeriod$.oclIsUndefined())]
           { [$newPeriod$.regime] := [$FoodRegimesCB.selected$]
             [$EditUserRegimenesWI.thisUser$.regimes]+= [$newPeriod$]
             newPeriod := [null]
             reevaluate ThisUserRegimesTB.rows
             #refresh NewPeriodFO#
             FoodRegimesCB.selected := [null]
             }
    }
    }

Button DeletePeriodBU {
    Residency thisPeriod
    String text := ['Delete']
    event onClick {
    if [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->oclIsUndefined()]
        { notification(['Error'], ['Please, select first a period'], [0]) }
    else { 
        if [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->size() <> 1]
           { notification(['Error'], ['Please, select first a period'], [0]) }
        else {
            thisPeriod := [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->any(true)]
            try {
                 delete [$thisPeriod$]
                 reevaluate ThisUserRegimesTB.rows
            }
            catch (SecurityException) { 
                notification(['Message'], ['Sorry. You are not authorized to perform this action'], [-1])
            }
        }
    }
    }
}

#form UpdatePeriodFO {
    entity: Residency
    instance : [$ThisUserRegimesTB.selected$->any(true)]
    prop: start {label: ['Start: ']}
    prop: end {label: ['End: ']}
}#

Button ModifyPeriodBU {
Residency thisPeriod
    String text := ['Update']
    event onClick {
    if [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->oclIsUndefined()]
        { notification(['Error'], ['Please, select first a period'], [0]) }
    else { 
        if [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->size() <> 1]
           { notification(['Error'], ['Please, select first a period'], [0]) }
        else {
            thisPeriod := [$EditUserRegimenesWI.ThisUserRegimesTB.selected$->any(true)]
            if [$UpdatePeriodFO_start.value$.oclIsUndefined()]
                { notification(['Error'], ['Please, select first a starting date'], [0]) }
            else {
                if [$UpdatePeriodFO_end.value$.oclIsUndefined()]
                    { notification(['Error'], ['Please, select first a ending date'], [0]) }
                else { 
                    if [$EditUserRegimenesWI.thisUser$.regimes->select(p|
                                    p <> $thisPeriod$ and
                                    (($UpdatePeriodFO_start.value$ <= p.start and $UpdatePeriodFO_end.value$ >= p.start)
                                    or ($UpdatePeriodFO_start.value$ > p.start and $UpdatePeriodFO_start.value$ <= p.end)))
                                ->notEmpty()]
                        { notification(['Error'], ['The selected period overlaps with one or more existing regimes. Please, change either the starting or the ending date'], [0]) }
                    else {
                    try {
                 [$thisPeriod$.start] := [$UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay()]
                 [$thisPeriod$.end] := [$UpdatePeriodFO_end.value$.toLocalDate().atStartOfDay()]
                 ThisUserRegimesTB.rows := [$ThisUserRegimesTB.rows$->select(false)]
                 ThisUserRegimesTB.rows := [$EditUserRegimenesWI.thisUser$.regimes->sortedBy(start)->reverse()]
                 thisPeriod := [null]
            }
            catch (SecurityException) { 
                notification(['Message'], ['Sorry. You are not authorized to perform this action'], [-1])
            }
        }
        }
        }
        }
        }
        }
    }

Button BackBU {
    String text := ['Back']
    event onClick { back }
}

event onChange(ThisUserRegimesTB.selected) {
    if [not($ThisUserRegimesTB.selected$->oclIsUndefined())]
       { if [$ThisUserRegimesTB.selected$->size() = 1]
            { #refresh UpdatePeriodFO # }
         else { if [$ThisUserRegimesTB.selected$->size() > 1]
               { notification(['Error'], ['Please, select at most one period.'], [0]) }}
    }
    else { #refresh UpdatePeriodFO # }
}


}