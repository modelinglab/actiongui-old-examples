/*
- With update-macro, we may need to have a way of knowing whether the update was or not successful
*/
Window ConfigurationWI {
    Residence residence
    String text := ['Configuration']

    Label mealsLA {
        String text := ['Meals']
    }

    #table Meals_T {
        entity : Meal
        rows : [$ConfigurationWI.residence$.meals]
        column : literal {
                    label : ['Meal']
                }
        sortedBy : [literal]
        selection : SINGLE
    }#

    #form NewMealFO {
        entity: Meal
        prop: literal {
            label : ['Literal:']
        }
    }#

    Button NewMealBU {
        String text := ['Add']
        Meal newMeal
        event onClick {
            #create {
                form: NewMealFO
                result: newMeal
                assert: [not($NewMealFO_literal.text$.oclIsUndefined()) and $NewMealFO_literal.text$ <> '' ] {
                    message: ['NM0: Please, write the name of the new meal']
                    assert : [not($ConfigurationWI.residence$.meals->exists(m|m.literal = $NewMealFO_literal.text$))] {
                        message: ['NM1: There is already a meal with this name. Please, choose a different name']
                    } 
                }     
            }#
            if [not($newMeal$.oclIsUndefined())] {
                [$newMeal$.residence] := [$ConfigurationWI.residence$]
                #refresh Meals_T#                
                Meals_T.selected := [$newMeal$]
            }
        }

    }

    #form EditMealFO {
        entity: Meal
        instance: [$Meals_T.selected$]
        prop: literal {
            label : ['Literal:']
        }
    }#

    Button EditMealBU {
        String text := ['Modify']
        Meal selectedMeal
        event onClick {
            if [$Meals_T.selected$.oclIsUndefined()] {
                error := ['EM0: Please, select first a meal']
            }
            else {
                selectedMeal := [$Meals_T.selected$]
                #update {
                    form: EditMealFO
                    assert: [not($EditMealFO_literal.text$.oclIsUndefined()) and $EditMealFO_literal.text$ <> ''] {
                        message: ['EM3: Please, write the new name of the meal']
                        assert : [not($ConfigurationWI.residence$.meals->exists(m|m <> $Meals_T.selected$ and m.literal = $EditMealFO_literal.text$))] {
                            message: ['EM4:There is already a meal with this name. Please, choose a different name']
                        }
                    } 
                }# 
                #refresh Meals_T#
                Meals_T.selected := [$selectedMeal$]
            }
        }
    }

    Label mealOptionsLA {
        String text := ['Options']
    }

    #table Meal_Options_T {
        entity : MealOption
        rows : [$Meals_T.selected$.options]
        column : initial {
            label : ['Initials:']
         }
        column : literal {
            label : ['Literal:']
        }
        sortedBy: [literal]
        selection: SINGLE
    }#


    #form NewOptionFO {
        entity: MealOption
        prop: initial {
            label : ['Initials:']
        }
        prop: literal {
            label : ['Literal:']
        }
    }#

    Button NewOptionBU {
        String text := ['Add']
        MealOption newOption
        event onClick {
            #create {
                form: NewOptionFO
                result: newOption
                assert: [not($Meals_T.selected$.oclIsUndefined())] {
                    message: ['NO0: Please, select first a meal']
                    assert: [not($NewOptionFO_literal.text$.oclIsUndefined())] {
                        message: ['NO3: Please, write the literal of the new option']
                        assert: [not($NewOptionFO_initial.text$.oclIsUndefined())] {
                            message: ['NO4: Please, write the initials of the new option']
                            assert : [not($Meals_T.selected$.options->exists(o|o.literal = $NewOptionFO_literal.text$))] {
                                message: ['NO5: There is already an option for this meal with this name. Please, choose a different name']
                                assert : [not($Meals_T.selected$.options->exists(o|o.initial = $NewOptionFO_initial.text$))] { 
                                    message: ['NO6: There is already an option for this meal with these intials. Please, choose different initials']
                                }
                            }
                        }
                    }
                }
            }#
            if [not($newOption$.oclIsUndefined())] {
                [$newOption$.ownedBy] := [$Meals_T.selected$]
                #refresh Meals_T#
                Meals_T.selected := [$newOption$.ownedBy]            
                Meal_Options_T.selected := [$newOption$]
            }
        }

    }

    #form EditOptionFO {
        entity: MealOption
        instance: [$Meal_Options_T.selected$]
        prop: initial {
            label : ['Initials:']
        }
        prop: literal {
            label : ['Literal:']
        }
    }#

    Button EditOptionBU {
        String text := ['Modiy']
        MealOption selectedOption
        event onClick {
            if [$Meals_T.selected$.oclIsUndefined()] {
                error := ['Please, select first a meal']
            }
            else {
                if [$Meal_Options_T.selected$.oclIsUndefined()] {
                    error := ['Please, select an option first']
                }
                else {
                    selectedOption := [$Meal_Options_T.selected$]
                    #update {
                        form: EditOptionFO
                        assert: [not($EditOptionFO_literal.text$.oclIsUndefined())] {
                            message: ['Please, write the new literal of the option']
                            assert : [not($Meals_T.selected$.options->exists(mo|mo.literal = $EditOptionFO_literal.text$))] {
                                message: ['There is already an option for this meal with this name. Please, choose a different name']
                                assert: [not($EditOptionFO_initial.text$.oclIsUndefined())] {
                                    message: ['Please, write the new initials of the option']
                                    assert: [not($Meals_T.selected$.options->exists(mo|mo.initial = $EditOptionFO_initial.text$))] {
                                        message: ['There is already an option for this meal with these intials. Please, choose different initials']
                                    }
                                }
                            }  
                        }  
                     }#
                     #refresh Meal_Options_T#
                     Meal_Options_T.selected := [$selectedOption$]
                }
            }
        }
    }


Label mealOptionPeriodsLA {
    String text := ['Periods']
}

#table ThisOptionPeriodsFO {
    entity: Residency
    rows: [$Meal_Options_T.selected$.periodsOption]
    column: start {label: ['start'] }
    column: end {label: ['end'] }
    sortedBy: [start]
    selection: SINGLE
}#
 


#form NewPeriodOptionFO {
    entity: Residency
    prop: start {label: ['Start:']}
    prop: end {label: ['End:']}
}#

Button CreatePeriodOptionBU {
    String text := ['Add']
    Residency newPeriod
    event onClick {
        if [$Meals_T.selected$.oclIsUndefined()] {
            error := ['Please, select first a meal']
        }
        else {
            if [$Meal_Options_T.selected$.oclIsUndefined()] {
                error := ['Please, select an option first']
            }
            else {
                #create {
                    form: NewPeriodOptionFO 
                    result: newPeriod
                    assert: [not($NewPeriodOptionFO_start.value$.oclIsUndefined())] {
                        message: ['Please, select first a starting date'] 
                        assert: [not($NewPeriodOptionFO_end.value$.oclIsUndefined())] {
                            message: ['Please, select first an ending date']
                            assert: [$NewPeriodOptionFO_start.value$ <= $NewPeriodOptionFO_end.value$] {
                                message: ['Please, select an ending date that is later or equal than the starting date']
                                assert: [$Meal_Options_T.selected$.periodsOption->select(p|($NewPeriodOptionFO_start.value$ <= p.start and $NewPeriodOptionFO_end.value$ >= p.start) or ($NewPeriodOptionFO_start.value$ > p.start and $NewPeriodOptionFO_start.value$ <= p.end))->isEmpty()] {
                                    message: ['The selected period overlaps with one or more existing periods. Please, change either the starting or the ending date']
                                }
                            }
                        }
                    }
                }#
                if [not($newPeriod$.oclIsUndefined())] { 
                    [$Meal_Options_T.selected$.periodsOption]+= [$newPeriod$]
                    #refresh ThisOptionPeriodsFO#
                    #refresh NewPeriodOptionFO#
                }
            }
        } 
    }
} 

#form EditPeriodOptionFO {
    entity: Residency
    instance: [$ThisOptionPeriodsFO.selected$]
    prop: start {label: ['Start:']}
    prop: end {label: ['End:']}
}#

Button EditPeriodOptionBU {
    String text := ['Modify']
    Residency newPeriod
    event onClick {
        if [$Meals_T.selected$.oclIsUndefined()] {
            error := ['Please, select first a meal']
        }
        else {
            if [$Meal_Options_T.selected$.oclIsUndefined()] {
                error := ['Please, select an option first']
            }
            else {
                if [$ThisOptionPeriodsFO.selected$.oclIsUndefined()] {
                    error := ['Please, select a period first']
                }
                else {
                    #update {
                        form: EditPeriodOptionFO 
                        result: newPeriod
                        assert: [not($EditPeriodOptionFO_start.value$.oclIsUndefined())] {
                            message: ['Please, select first a starting date'] 
                            assert: [not($EditPeriodOptionFO_end.value$.oclIsUndefined())] {
                                message: ['Please, select first an ending date']
                                assert: [$EditPeriodOptionFO_start.value$ <= $EditPeriodOptionFO_end.value$] {
                                    message: ['Please, select an ending date that is later or equal than the starting date']
                                    assert: [$Meal_Options_T.selected$.periodsOption->excluding($ThisOptionPeriodsFO.selected$)->select(p|($EditPeriodOptionFO_start.value$ <= p.start and $EditPeriodOptionFO_end.value$ >= p.start) or ($EditPeriodOptionFO_start.value$ > p.start and $EditPeriodOptionFO_start.value$ <= p.end))->isEmpty()] {
                                        message: ['The selected period overlaps with one or more existing periods. Please, change either the starting or the ending date']
                                    }
                                }
                            }
                        }
                    }#
                    #refresh ThisOptionPeriodsFO#
                    #refresh EditPeriodOptionFO#
                }
            }
        }
    }
} 

Label deadlinesLA {
    String text := ['Deadlines']
}
Table DeadlinesTB {
    Set(MealOptionDeadline) rows := [$ThisOptionPeriodsFO.selected$.deadlines]
    MealOptionDeadline selected
    columns {
        ['First'] : BooleanField Monday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::MONDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::MONDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Mondays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::MONDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::MONDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::MONDAY)] }
                   }    
                } 
                }
        ['Second'] : BooleanField Tuesday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::TUESDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::TUESDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Tuesdays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::TUESDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::TUESDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::TUESDAY)] }
                   }   
                  
                } 
                  }
        ['Third'] : BooleanField Wednesday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::WEDNESDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::WEDNESDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Wednesdays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::WEDNESDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::WEDNESDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::WEDNESDAY)] }
                   }   
                  
                } }
        ['Fourth'] : BooleanField Thursday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::THURSDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::THURSDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Thursdays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::THURSDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::THURSDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::THURSDAY)] }
                   }             
                } }
        ['Firfth'] : BooleanField Friday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::FRIDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::FRIDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Fridays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::FRIDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::FRIDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::FRIDAY)] }
                   }   
                  
                }}
        ['Sixth'] : BooleanField Saturday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::SATURDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::SATURDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Saturdays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::SATURDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::SATURDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::SATURDAY)] }
                   }   
                  
                } }
        ['Seventh'] : BooleanField Sunday { 
                Boolean value := [if ($DeadlinesTB.row$.days->includes(DayOfWeek::SUNDAY)) then true else false endif] 
                {
                if [not($value$.oclIsUndefined())] 
                   { if [$value$] 
                        { if [$DeadlinesTB.rows$->excluding($DeadlinesTB.row$)->exists(d|d.days->includes(DayOfWeek::SUNDAY))]
                            { value := [false]
                              notification(['Error'], ['There is already a deadline fixed form Sundays'], [0]) }
                         else { [$DeadlinesTB.row$.days] := 
                              [if $DeadlinesTB.row$.days->oclIsUndefined()
                              then DayOfWeek::SUNDAY->asSet()
                              else $DeadlinesTB.row$.days->including(DayOfWeek::SUNDAY) endif] } } 
                      else { [$DeadlinesTB.row$.days] := [$DeadlinesTB.row$.days->excluding(DayOfWeek::SUNDAY)] }
                   }   
                  
                } }
        ['DaysBefore'] : Label DaysBefore { String text := [$DeadlinesTB.row$.cday.toString()] }
        ['UpDB'] : Button UpDB { 
                    String text := ['+'] 
                    event onClick {
                        [$DeadlinesTB.row$.cday] := [$DeadlinesTB.row$.cday + 1]
                        reevaluate DeadlinesTB.DaysBefore.text
                        }           
                    }
        ['DownDB'] : Button DownDB { 
                        String text := ['-']
                        event onClick {
                            if [$DeadlinesTB.row$.cday > 0 ]
                                { [$DeadlinesTB.row$.cday] := [$DeadlinesTB.row$.cday - 1] 
                                  reevaluate DeadlinesTB.DaysBefore.text }
                            } 
                        }
        ['HourLimit'] : Label HourLimit { 
            String text := [if $DeadlinesTB.row$.chour < 10 
                            then '0'.concat($DeadlinesTB.row$.chour.toString())
                            else $DeadlinesTB.row$.chour.toString() endif] 
            }
        ['UpHL'] : Button UpHL { 
                    String text := ['+'] 
                    event onClick {
                            if [$DeadlinesTB.row$.chour < 23 ]
                                { [$DeadlinesTB.row$.chour] := [$DeadlinesTB.row$.chour + 1] 
                                  reevaluate DeadlinesTB.HourLimit.text }
                            } 
                        }
        ['DownHL'] : Button DownHL { 
                    String text := ['-'] 
                    event onClick {
                            if [$DeadlinesTB.row$.chour > 0 ]
                                { [$DeadlinesTB.row$.chour] := [$DeadlinesTB.row$.chour - 1] 
                                  reevaluate DeadlinesTB.HourLimit.text }
                            } 
                        }
        ['MinutesLimit'] : Label MinutesLimit { 
            String text := [if $DeadlinesTB.row$.cminute < 10 
                            then '0'.concat($DeadlinesTB.row$.cminute.toString())
                            else $DeadlinesTB.row$.cminute.toString() endif]
            }
        ['UpML'] : Button UpML { 
                    String text := ['+'] 
                    event onClick {
                        if [$DeadlinesTB.row$.cminute < 59 ]
                           { [$DeadlinesTB.row$.cminute] := [$DeadlinesTB.row$.cminute + 1] 
                             reevaluate DeadlinesTB.MinutesLimit.text }
                            } 
                    }
        ['DownML'] : Button DownML { 
                        String text := ['-'] 
                        event onClick {
                            if [$DeadlinesTB.row$.cminute > 0 ]
                                { [$DeadlinesTB.row$.cminute] := [$DeadlinesTB.row$.cminute - 1] 
                                  reevaluate DeadlinesTB.MinutesLimit.text }
                            } 

        }
    }
}

Button AddDeadlineBU {
    String text := ['Add']
    event onClick {
        if [$Meals_T.selected$.oclIsUndefined()] {
            error := ['Please, select first a meal']
        }
        else {
            if [$Meal_Options_T.selected$.oclIsUndefined()]{
                error := ['Please, select an option first']
            }
            else {
                if [$ThisOptionPeriodsFO.selected$.oclIsUndefined()] {
                    error := ['Please, select a period first']
                }
                else {
                    newDeadline := new MealOptionDeadline
                    // Default setting
                    [$newDeadline$.cday] := [0]
                    [$newDeadline$.chour] := [9]
                    [$newDeadline$.cminute] := [0]
                    [$newDeadline$.days] := [Set{DayOfWeek::MONDAY, DayOfWeek::TUESDAY, DayOfWeek::WEDNESDAY, DayOfWeek::THURSDAY, DayOfWeek::FRIDAY, DayOfWeek::SATURDAY, DayOfWeek::SUNDAY}->reject(d|$DeadlinesTB.rows$.days->includes(d))]
                    // End default setting
                    [$newDeadline$.ownedBy] := [$ThisOptionPeriodsFO.selected$]
                    reevaluate DeadlinesTB.rows
                }
            }
        }
    }
}


Button DeleteDeadlinesBU {
    String text := ['Delete']
    event onClick {
        if [$DeadlinesTB.selected$.oclIsUndefined()] {
            error := ['Please, select first a deadline']
        }
        else {
            delete [$DeadlinesTB.selected$]
        }
        reevaluate DeadlinesTB.rows
   }
}

Button BackBU {
    String text := ['Back'] 
    event onClick {
        back
    }
}


event onChange(Meals_T.selected) {
    #refresh EditMealFO #
    #refresh Meal_Options_T #
}

event onChange(Meal_Options_T.selected) {
    #refresh EditOptionFO #
    #refresh ThisOptionPeriodsFO #
} 
event onChange(ThisOptionPeriodsFO.selected) {
    #refresh EditPeriodOptionFO #
    reevaluate DeadlinesTB.rows
}

}