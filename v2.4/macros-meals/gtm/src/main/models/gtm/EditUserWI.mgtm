Window EditUserWI {
    Residence residence
    User thisUser

    #form ThisUserFO {
    entity: User
        instance: [$EditUserWI.thisUser$]
        prop: name {label: ['Name: '] }
        prop: surname {label: ['Surname: ']}
        prop: login {label: ['Login: ']}
        prop: password {label : ['Password: ']}
        prop: role {label: ['Role: ']}
    }#

Button thisUserUpdateBU {
    String text := ['Update']
    event onClick {
        #update {
            form: ThisUserFO
            assert: [$ThisUserFO_login.text$ <> ''] {
                message: ['The login can not be empty']
                assert: [$ThisUserFO_login.text$ <> $EditUserWI.thisUser$.login implies $EditUserWI.residence$.users->forAll(u|u.login <> $ThisUserFO_login.text$)] {
                    message: ['There is already a user with this login. Please, use a different login.']
                } 
            }
            
        }#
    }
}

Button editUserPeriodsBU {
    String text := ['Periods']
    event onClick {
        #forward { target: EditUserPeriodsWI
                   arg: thisUser {value: [$EditUserWI.thisUser$] }
                  }#
    }
}

Button editUserRegimenesBU {
    String text := ['Regimes']
    event onClick {
        #forward { target: EditUserRegimenesWI
                   arg: thisUser {value: [$EditUserWI.thisUser$] }
                  }#
    }
}

Button countMealsBU {
    String text := ['Counts']
    event onClick {
        #forward { target: UserCountMealsWI
                   arg: thisUser {value: [$EditUserWI.thisUser$] 
                   arg: residence {value: [$EdituserWI.residence$]} }
                  }#
    }
}


Button BackBU {
    String text := ['Back']
    event onClick {
        back
    }
}
}