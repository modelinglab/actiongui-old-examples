Window EditUserPeriodsWI {
    User thisUser
    
    /*
    #form ThisUserFO {
    entity: User
        instance: [$EditUserPeriodsWI.thisUser$]
        prop: periods {
            rows: [$EditUserPeriodsWI.thisUser$.periods->sortedBy(start)->reverse()]
            selected: [null]
            column: start 
            column: end
        }
    }#
    */

    Table ThisUserFO {
        OrderedSet(Residency) rows := [$EditUserPeriodsWI.thisUser$.periods->sortedBy(start)->reverse()]
        Residency selected := [null]
        String error := [null]

        columns {
            ['Start'] : Label start {
                String text := [$ThisUserFO.row$.start.toString().substring(1,10)]
            }
            ['End'] : Label end {
                String text := [$ThisUserFO.row$.end.toString().substring(1,10)]
            }
            ['Contract'] : Label contract {
                String text := [$ThisUserFO.row$.contract.name]
            }
        }
    }
    
#form NewPeriodFO {
    entity: Residency
    prop: start {label: ['Start: ']}
    prop: end {label: ['End: ']}
}#

Label ContractsLB {
    String text := ['Contract']
}

ComboBox ContractsCB {
        Set(Contract) rows := [$EditUserPeriodsWI.caller$.residence.contracts]
        
        Label Contract {
            String text := [$ContractsCB.row$.name]
        }

    }

Button CreatePeriodBU {
    String text := ['New period']
    Residency newPeriod
    event onClick {
        #create {
            form: NewPeriodFO 
            result: newPeriod
            assert: [not($NewPeriodFO_start.value$.oclIsUndefined())]
                {message: ['Please, select first a starting date'] 
                 assert: [not($NewPeriodFO_end.value$.oclIsUndefined())]
                    {message: ['Please, select first an ending date']
                        assert: [$NewPeriodFO_start.value$ <= $NewPeriodFO_end.value$]
                        {message: ['Please, select an ending date that is later or equal than the starting date']
                        assert: [$EditUserPeriodsWI.thisUser$.periods->select(p|
                                    ($NewPeriodFO_start.value$.toLocalDate().atStartOfDay() <= p.start.toLocalDate().atStartOfDay() and $NewPeriodFO_end.value$.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay())
                                    or ($NewPeriodFO_start.value$.toLocalDate().atStartOfDay() > p.start.toLocalDate().atStartOfDay() and $NewPeriodFO_start.value$.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay()))
                                ->isEmpty()]
                            {message: ['The selected period overlaps with one or more existing periods. Please, change either the starting or the ending date']
                             assert: [not($ContractsCB.selected$.oclIsUndefined())] 
                               {message: ['Please, select first a contract.' ] 
                            
} }} } }
        }#
        if [not($newPeriod$.oclIsUndefined())]
           { [$EditUserPeriodsWI.thisUser$.periods]+= [$newPeriod$]
             [$newPeriod$.contract]:= [$ContractsCB.selected$]
             newPeriod := [null]
             reevaluate ThisUserFO.rows
             reevaluate ThisUserFO.selected
             reevaluate ThisUserFO.error
             #refresh NewPeriodFO#
             ContractsCB.selected := [null]
             }
    }
    }

Button DeletePeriodBU {
    Residency thisPeriod
    String text := ['Delete']
    event onClick {
    if [$EditUserPeriodsWI.ThisUserFO.selected$.oclIsUndefined()] {
        notification(['Error'], ['Please, select first a period'], [0]) }
    else { 
        thisPeriod := [$EditUserPeriodsWI.ThisUserFO.selected$]
        try {
            foreach selection in [$EditUserPeriodsWI.thisUser$.dailyMeals->select(d|d.date.toLocalDate().atStartOfDay() >= $thisPeriod$.start.toLocalDate().atStartOfDay() and d.date.toLocalDate().atStartOfDay() <= $thisPeriod$.end.toLocalDate().atStartOfDay()).selections] {
                delete [$selection$]
            }
            delete [$thisPeriod$]
            reevaluate ThisUserFO.rows
            reevaluate ThisUserFO.selected
            reevaluate ThisUserFO.error
        }
        catch (SecurityException) { 
            notification(['Message'], ['Sorry. This period contains selections that can not be deleted'], [-1])
        }
    }
    }
}

#form UpdatePeriodFO {
    entity: Residency
    instance : [$ThisUserFO.selected$]
    prop: start {label: ['Start: ']}
    prop: end {label: ['End: ']}
}#

Label ContractsUpdateLB {
    String text := ['Contract']
}

ComboBox ContractsUpdateCB {
        Set(Contract) rows := [$EditUserPeriodsWI.caller$.residence.contracts]
        Contract selected := [$ThisUserFO.selected$.contract]
        
        Label ContractUpdate {
            String text := [$ContractsUpdateCB.row$.name]
            
        }

    }

Button ModifyPeriodBU {
    Residency thisPeriod
    String text := ['Update']
    event onClick {
        if [$EditUserPeriodsWI.ThisUserFO.selected$.oclIsUndefined()] {
            notification(['Error'], ['Please, select first a period'], [0])
        }
        else { 
            thisPeriod := [$EditUserPeriodsWI.ThisUserFO.selected$]
            if [$UpdatePeriodFO_start.value$.oclIsUndefined()] {
                notification(['Error'], ['Please, select first a starting date'], [0]) }
            else {
                if [$UpdatePeriodFO_end.value$.oclIsUndefined()] {
                    notification(['Error'], ['Please, select first an ending date'], [0])
                }
                else {
                    if [$UpdatePeriodFO_start.value$ > $UpdatePeriodFO_end.value$] {
                        notification(['Error'], ['Please, select an ending date that is later or equal than the starting date'], [0])
                    }
                    else {  
                        if [$EditUserPeriodsWI.thisUser$.periods->select(p|
                                        p <> $thisPeriod$ and
                                        (($UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay() <= p.start.toLocalDate().atStartOfDay() and $UpdatePeriodFO_end.value$.toLocalDate().atStartOfDay() >= p.start.toLocalDate().atStartOfDay())
                                        or ($UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay() > p.start.toLocalDate().atStartOfDay() and $UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay() <= p.end.toLocalDate().atStartOfDay())))
                                    ->notEmpty()] {
                            notification(['Error'], ['The selected period overlaps with one or more existing periods. Please, change either the starting or the ending date'], [0]) }
                        else {
                            if [$ContractsUpdateCB.selected$.oclIsUndefined() ] {
                               notification(['Error'], ['Please, select first a contract.'], [0])
                            }
                            else {
                                try {
                                    // foreach selection in [$EditUserPeriodsWI.thisUser$.dailyMeals->select(d|d.date >= $thisPeriod$.start and d.date <= $thisPeriod$.end)->select(d|d.date < $UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay()  or d.date > $UpdatePeriodFO_end.value$.toLocalDate().atStartOfDay()).selections]
                                    foreach selection in [$EditUserPeriodsWI.thisUser$.dailyMeals->select(d|d.date.toLocalDate().atStartOfDay() >= $thisPeriod$.start.toLocalDate().atStartOfDay() and d.date.toLocalDate().atStartOfDay() <= $thisPeriod$.end.toLocalDate().atStartOfDay()).selections->asSet() - $EditUserPeriodsWI.thisUser$.dailyMeals->select(d|d.date.toLocalDate().atStartOfDay() >= $UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay() and d.date.toLocalDate().atStartOfDay() <= $UpdatePeriodFO_end.value$.toLocalDate().atStartOfDay()).selections->asSet()] {
                                        delete [$selection$]
                                    }
                                    // delete all meal selections that are not included in the new contract of the period
                                    //foreach selection2 in [$EditUserPeriodsWI.thisUser$.dailyMeals->select(d|d.date.toLocalDate().atStartOfDay() >= $thisPeriod$.start.toLocalDate().atStartOfDay() and d.date.toLocalDate().atStartOfDay() <= $thisPeriod$.end.toLocalDate().atStartOfDay()).selections->asSet()->reject(ms|$ContractsUpdateCB.selected$.options->select(co|co.mealOption = ms.mealOption).days->includes(ms.ownedBy.date.getDayOfWeek()))] {
                                    //    delete [$selection2$]
                                    //}

                                    [$thisPeriod$.start] := [$UpdatePeriodFO_start.value$.toLocalDate().atStartOfDay()]
                                    [$thisPeriod$.end] := [$UpdatePeriodFO_end.value$.toLocalDate().atStartOfDay()]
                                    [$thisPeriod$.contract] := [$ContractsUpdateCB.selected$]
                                    ThisUserFO.rows := [$ThisUserFO.rows$->select(false)]
                                    ThisUserFO.rows := [$EditUserPeriodsWI.thisUser$.periods->sortedBy(start)->reverse()]
                                    thisPeriod := [null]
                                }
                                catch (SecurityException) { 
                                    notification(['Message'], ['Sorry. This period contains selections that can not be deleted'], [-1])
                                }
                            }
                        }
                    }               
                }
            }
        }
    }
}

Button BackBU {
    String text := ['Back']
    event onClick { back }
}

event onChange(ThisUserFO.selected) {
    #refresh UpdatePeriodFO #
    reevaluate ContractsUpdateCB.selected
}


}
