role SYSTEM {
    User {
        read(login), read(password), read(role), read(residence)
    }
    MealOption {
        fullAccess
    }
    Meal {
        fullAccess
    }
    MealOptionDeadline {
        fullAccess
    }
    Residence {
        read(name)
    }
}

role DIRECTOR {
    User {
        fullAccess
    }
    Guest {
        fullAccess
    }
    MealOption {
        fullAccess
    }
    Meal {
        fullAccess
    }
    MealOptionDeadline {
        fullAccess
    }
    Residency {
        fullAccess
    }
    DailyMealSelection {
        fullAccess
    }
    MealSelection {
        //fullAccess
        create
        read
        update(meal)
        update(ownedBy) 
        update(mealOption) constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and (if not(self.mealOption.oclIsUndefined())
                             then self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                                and p.end >= mealDate
                                and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                    and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() 
                                    then now.getHour() < q.chour 
                                         or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif)
                                    )
                              else true endif)
                        and value.periodsOption->exists(p|
                                p.start <= mealDate 
                            and p.end >= mealDate
                            and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() 
                                    then now.getHour() < q.chour 
                                        or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif
                                )
                            )
                    ]
        delete constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                            and p.end >= mealDate
                            and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() then
                                        now.getHour() < q.chour 
                                        or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif
                                )
                            )
                       
                    ]
        update(foodRegime) constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and (if not(self.mealOption.oclIsUndefined())
                             then self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                                and p.end >= mealDate
                                and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                    and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay()
                                    then now.getHour() < q.chour 
                                         or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif)
                                    )
                              else true endif)

                        and (
                            if value.oclIsUndefined() then
                                true
                            else
                                value.ownedBy->exists(p|p.ownedByRegime = self.ownedBy.selectedBy and p.start.toLocalDate().atStartOfDay() <= mealDate.toLocalDate().atStartOfDay() and p.end.toLocalDate().atStartOfDay() >= mealDate.toLocalDate().atStartOfDay())
                            endif
                        )
                    ] 

    }
    Residence {
        read, update constrainedBy [self.users->includes(caller)]
    }
    FoodRegime {
        fullAccess
    }
    Contract {
        fullAccess
    }
    ContractOption {
        fullAccess
    }
}

role RESIDENT {
    Residence {
        read(zone), read(meals) constrainedBy [self.users->includes(caller)]
    }
    MealOption {
        fullAccess
    }
    Meal {
        fullAccess
    }
    MealOptionDeadline {
        fullAccess
    }
    User {
        read constrainedBy [self=caller]
        update(password) constrainedBy [self=caller]
        add(dailyMeals) constrainedBy [self=caller 
                                       and caller.periods->exists(p|p.start <= target.date and p.end >= target.date)]
    }
    Contract {
        fullAccess
    }
    DailyMealSelection {
        //fullAccess
        create
        read
        update(date) // constrainedBy [self.date.oclIsUndefined()] // and value => Date.now().year()] and value  >= date.now().dayOfYear()
        update(selectedBy) //constrainedBy [value = caller]
        update(selections)
        add(selections)
        remove(selections)
    }
    MealSelection {
        //fullAccess
        create
        delete constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        self.ownedBy.selectedBy = caller
                        and mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                            and p.end >= mealDate
                            and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() then
                                        now.getHour() < q.chour 
                                        or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif
                                )
                            )
                       
                    ]
        read
        update(meal)
        update(ownedBy) constrainedBy [value.selectedBy = caller and 
                                       caller.periods->exists(p|p.start <= value.date and p.end >= value.date)]
        
        update(mealOption) constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        self.ownedBy.selectedBy = caller
                        and mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and caller.periods->exists(p|p.start <= mealDate and p.end >= mealDate
                            and p.contract.options->exists(o|
                            o.mealOption = value and o.days->includes(mealDate.getDayOfWeek())))
                        and (if not(self.mealOption.oclIsUndefined())
                             then self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                                and p.end >= mealDate
                                and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                    and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() 
                                    then now.getHour() < q.chour 
                                         or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif)
                                    )
                              else true endif)
                        and value.periodsOption->exists(p|
                                p.start <= mealDate 
                            and p.end >= mealDate
                            and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() 
                                    then now.getHour() < q.chour 
                                        or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif
                                )
                            )
                    ]
        update(foodRegime) constrainedBy [
                    let 
                        mealDate    : LocalDateTime = self.ownedBy.date,
                        now         : LocalDateTime = LocalDateTime.now(caller.residence.zone)
                    in
                        self.ownedBy.selectedBy = caller
                        and mealDate.toLocalDate().atStartOfDay() >= now.toLocalDate().atStartOfDay()
                        and (if not(self.mealOption.oclIsUndefined())
                             then self.mealOption.periodsOption->exists(p|
                                p.start <= mealDate 
                                and p.end >= mealDate
                                and p.deadlines->exists(q|
                                    q.days->includes(mealDate.getDayOfWeek())
                                    and 
                                    if now.plusDays(q.cday).toLocalDate().atStartOfDay() = mealDate.toLocalDate().atStartOfDay() 
                                    then now.getHour() < q.chour 
                                         or (now.getHour() = q.chour and now.getMinute() <= q.cminute)
                                    else
                                        now.plusDays(q.cday).toLocalDate().atStartOfDay() < mealDate.toLocalDate().atStartOfDay()
                                    endif)
                                    )
                              else true endif)

                        and (
                            if value.oclIsUndefined() then
                                true
                            else
                                value.ownedBy->exists(p|p.ownedByRegime = self.ownedBy.selectedBy and p.start.toLocalDate().atStartOfDay() <= mealDate.toLocalDate().atStartOfDay() and p.end.toLocalDate().atStartOfDay() >= mealDate.toLocalDate().atStartOfDay())
                            endif
                        )
                    ]            
    }
    Residency {
        fullAccess
    }

}

role ADMINISTRATION {
    User {
        fullAccess
    }
    Residence {
        read(zone), read(meals), read(users), read(guests) constrainedBy [self.users->includes(caller)]
    }
    Meal {
        fullAccess
    }
    DailyMealSelection {
        fullAccess
    }
    MealSelection {
        fullAccess
    }
    MealOption {
        fullAccess
    }
    Residency {
        fullAccess
    }
    MealOptionDeadline {
        fullAccess
    }
    FoodRegime {
        fullAccess
    }
}
